class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int str1Len = str1.size();
        int str2Len  = str2.size();
        int c[str1Len+1][str2Len+1];
        
        for(int  i=0; i < str2Len+1; i++)
        {
            c[0][i] = 0;
        }
        for(int  i=0; i < str1Len+1; i++)
        {
            c[i][0] = 0;
        }
        
        
        for(int i  =0 ;  i < str1Len;i++)
        {
            for(int j  =0 ; j< str2Len;j++)
            {
                if(str1[i]  ==  str2[j])
                {
                    c[i+1][j+1] = 1+c[i][j];
                    int k = (i+1) - c[i+1][j+1];
                    int l = c[i+1][j+1];
                    //temp = str1Len[k: l]
                    // string temp= text1.substr(k,l);
                    // cout << "temp " << temp << "\n";
                     
                }
                else
                {
                    c[i+1][j+1] = max(c[i+1][j],c[i][j+1]);
                }
            }
        }
//printing SCS
        int i = str1Len;
        int j  = str2Len;

        string s="";
        while(i>0 && j>0)
        {
            if(str1[i-1]==str2[j-1])
            {
                s.push_back(str1[i-1]);
                i--;
                j--;
            }
            else
            {
                if(c[i-1][j]>c[i][j-1])
                {
                    s.push_back(str1[i-1]);
                    i--;
                }
                else
                {
                    s.push_back(str2[j-1]);
                    j--;
                }
            }
        }
        //if the table ends at a particular column or row
        while(i>0)
        {
            s.push_back(str1[i-1]);
            i--;
        }
        while(j>0)
        {
            s.push_back(str2[j-1]);
            j--;
        }
        reverse(s.begin(),s.end());
        return s;
        
    }
};
