class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        return  self.canPartition(stones)
    
    def canPartition(self, nums: List[int]) -> int:
        
        # https://www.youtube.com/watch?v=H3_er7A1pps

        sum_nums = sum(nums)   
        n  = len(nums)
        m = sum_nums
        dp =  [[False for y in range(m+1)] for x in range(n+1)]
        
        for  i  in range(0,n+1):
            for j in  range(0,m+1):            
                if  i == 0 :
                    dp[i][j] = False
                if j == 0:
                    dp[i][j] = True
                
                    
        # dp[0][0] =  True
                    
        
        for  i  in range(1,n+1):
            
            for j in  range(1,m+1):
                
                if nums[i-1] <= j:                    
                    dp[i][j] =  dp[i-1][j] or dp[i-1][j- nums[i-1]]
                else:
                    dp[i][j] =  dp[i-1][j] 
                 
        vector = []
        half_path  = int(m/2) +  1
        for col in range(0,half_path):
            if dp[n][col] == True:
                vector.append(col)
                     
        min_diff = float('inf')
        
        for i in range(len(vector)):
            min_diff = min(min_diff,sum_nums - 2*vector[i])
        
       
        return  min_diff
