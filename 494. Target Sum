class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        
        zero_count = 0
        sum_nums = 0
        diff = S
       
        
        for  num in nums:
            sum_nums += num
            
            if (num == 0):
                zero_count  +=  1;
            
        temp  = sum_nums  - diff
        if S > sum_nums  or temp%2 != 0:
            return 0
       
        
      
        
        # sum1 =  (sum_nums  - diff) // 2
        sum1 =  (sum_nums  + diff) // 2
       
        return  self.targetSum(nums, sum1,  zero_count)
    
    def targetSum(self, nums: List[int], sum1 : int, zero_count: int) -> int:
        
        # https://www.youtube.com/watch?v=H3_er7A1pps

        # {0,0,2} = {+0,+0,2}, {+0,-0,2}, {-0,+0,2},{-0,-0,2} . Ans: 4

        n  = len(nums)
        m = sum1
        dp =  [[0 for y in range(m+1)] for x in range(n+1)]
        
        for  i  in range(0,n+1):
            for j in  range(0,m+1):            
                if  i == 0 :
                    dp[i][j] = 0
                if j == 0:
                    dp[i][j] = 1 
                    
        
        for  i  in range(1,n+1):
            
            for j in  range(1,m+1):
                
                if  nums[i-1] > j or nums[i-1] == 0:
                     # make no change if  nums[i-1]  ==  0 and put the previous value as it is in the next subproblem. 
                    dp[i][j] =  dp[i-1][j] 
                else :
                    dp[i][j] =  dp[i-1][j] + dp[i-1][j- nums[i-1]]
        print( dp[n][m] )
        print( int( pow(2,zero_count) * dp[n][m]))
        return    int( pow(2,zero_count) * dp[n][m])
        
