class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        return  self.unboundedKnapsack(coins,amount)
    
    def unboundedKnapsack(self, nums: List[int], amount:int) -> int:
           
        n  = len(nums)
        m = amount
        dp =  [[float('inf')-1 for y in range(m+1)] for x in range(n+1)]
        
        for  i  in range(0,n+1):
            for j in  range(0,m+1):            
                if  i == 0 :
                    dp[i][j] = float('inf')-1
                if j == 0:
                    dp[i][j] = 0
                
                    
        
        for  i  in range(1,n+1):
            
            for j in  range(1,m+1):
                
                if nums[i-1] <= j:                    
                    dp[i][j] =  min(dp[i-1][j] , 1+ dp[i][j- nums[i-1]])
                else:
                    dp[i][j] =  dp[i-1][j] 
        
       
        if dp[n][m] == float('inf'):
            return  -1
        return dp[n][m]
                 
#   https://www.youtube.com/watch?v=k4y5Pr0YVhg
