class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        if  amount ==  0:
            return  1
        if not coins:
            return 0
        
        return  self.unboundedKnapsack(coins,amount)
        
        hash_map  = {}
        return self.backtracking( coins,0, amount, hash_map)
    
    def unboundedKnapsack(self, nums: List[int], amount:int) -> int:
           
        n  = len(nums)
        m = amount
        dp =  [[0 for y in range(m+1)] for x in range(n+1)]
        
        for  i  in range(0,n+1):
            for j in  range(0,m+1):            
                if  i == 0 :
                    dp[i][j] = 0
                if j == 0:
                    dp[i][j] = 1
                
        for  i  in range(1,n+1):
            
            for j in  range(1,m+1):
                
                if nums[i-1] <= j:                    
                    dp[i][j] =  dp[i-1][j] + dp[i][j- nums[i-1]]
                else:
                    dp[i][j] =  dp[i-1][j] 
        
      
        return dp[n][m]
